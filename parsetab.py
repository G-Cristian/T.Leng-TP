
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '3F9468AC3D8CE8C23999403EBA531F0F'
    
_lr_action_items = {'NOT':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[11,-9,11,11,-7,-5,11,-6,11,11,-8,11,11,11,11,11,11,11,-4,11,11,11,11,11,11,11,11,11,11,-56,11,11,11,11,-54,11,-55,11,11,11,11,11,11,11,-62,-59,11,11,11,-57,-64,-58,11,-63,]),'COLINEALES':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[27,-9,27,27,-7,-5,27,-6,27,27,-8,27,27,27,27,27,27,27,-4,27,27,27,27,27,27,27,27,27,27,-56,27,27,27,27,-54,27,-55,27,27,27,27,27,27,27,-62,-59,27,27,27,-57,-64,-58,27,-63,]),'STRING':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[23,-9,23,23,-7,-5,23,-6,23,23,-8,23,23,23,23,23,23,23,-4,23,23,23,23,23,23,23,23,23,23,-56,23,23,23,23,-54,23,-55,23,23,23,23,23,23,23,-62,-59,23,23,23,-57,-64,-58,23,-63,]),'COLON':([2,3,4,5,6,7,13,14,15,17,18,23,26,29,30,31,38,39,40,42,44,53,54,73,78,79,82,83,87,88,90,91,92,95,96,97,100,101,109,110,112,122,124,131,133,142,],[-32,-24,-14,-20,-22,-23,-35,-29,-41,-19,-61,-36,-46,-10,-30,-27,-21,-26,-42,-17,-28,-33,-16,104,-18,-15,-34,-49,104,-13,-48,-31,113,-25,-44,-45,-37,-47,-67,-40,-70,-69,-60,-65,-68,-66,]),'LBRACKET':([0,7,9,11,12,15,17,20,21,24,25,28,31,32,34,35,36,37,40,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,73,74,75,77,80,83,90,99,100,102,104,105,110,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[32,49,-9,32,32,-41,-43,-7,-5,32,-6,32,-27,32,-8,32,32,32,-42,32,32,32,32,-4,32,32,32,32,32,32,32,32,32,32,-42,-56,32,32,32,-49,-48,32,-37,-54,32,-55,-40,32,32,32,32,32,32,32,-62,-59,32,32,32,-57,-64,-58,32,-63,]),'FALSE':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[30,-9,30,30,-7,-5,30,-6,30,30,-8,30,30,30,30,30,30,30,-4,30,30,30,30,30,30,30,30,30,30,-56,30,30,30,30,-54,30,-55,30,30,30,30,30,30,30,-62,-59,30,30,30,-57,-64,-58,30,-63,]),'NUMBER':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[44,-9,44,44,-7,-5,44,-6,44,44,-8,44,44,44,44,44,44,44,-4,44,44,44,44,44,44,44,44,44,44,-56,44,44,44,44,-54,44,-55,44,44,44,44,44,44,44,-62,-59,44,44,44,-57,-64,-58,44,-63,]),'FOR':([0,9,20,21,25,28,34,35,36,37,50,74,75,102,105,115,121,126,129,135,136,139,140,141,143,],[10,-9,-7,-5,-6,10,-8,10,10,10,-4,-56,10,-54,-55,10,10,-62,-59,10,-57,-64,-58,10,-63,]),'BOOL_OP':([2,3,4,5,6,7,13,14,15,17,18,23,30,31,38,39,40,42,44,53,54,73,78,79,82,83,88,90,91,95,100,101,109,110,112,122,131,133,142,],[-32,-24,-14,-20,-22,-23,-35,-29,-41,-19,58,-36,-30,-27,-21,-26,-42,-17,-28,-33,-16,-42,-18,-15,-34,-49,-13,-48,-31,-25,-37,-47,-67,-40,-70,-69,-65,-68,-66,]),'DOUBLE_AO':([0,3,5,6,7,9,11,12,14,15,17,20,21,24,25,28,30,31,32,34,35,36,37,38,39,40,42,43,44,46,47,49,50,51,55,56,58,59,60,61,63,64,65,73,74,75,77,78,80,83,90,95,99,100,101,102,104,105,109,110,111,112,113,114,115,116,120,121,122,126,129,130,131,132,133,135,136,139,140,141,142,143,],[12,-24,-20,-22,-23,-9,12,12,-29,-41,-19,-7,-5,12,-6,12,-30,-27,12,-8,12,12,12,-21,-26,-42,78,12,-28,12,12,12,-4,12,12,12,12,12,12,12,12,12,12,-42,-56,12,12,-18,12,-49,-48,-25,12,-37,-47,-54,12,-55,-67,-40,12,-70,12,12,12,12,12,12,-69,-62,-59,12,-65,12,-68,12,-57,-64,-58,12,-66,-63,]),'CAPITALIZAR':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[1,-9,1,1,-7,-5,1,-6,1,1,-8,1,1,1,1,1,1,1,-4,1,1,1,1,1,1,1,1,1,1,-56,1,1,1,1,-54,1,-55,1,1,1,1,1,1,1,-62,-59,1,1,1,-57,-64,-58,1,-63,]),'TRUE':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[14,-9,14,14,-7,-5,14,-6,14,14,-8,14,14,14,14,14,14,14,-4,14,14,14,14,14,14,14,14,14,14,-56,14,14,14,14,-54,14,-55,14,14,14,14,14,14,14,-62,-59,14,14,14,-57,-64,-58,14,-63,]),'$end':([0,9,20,21,25,28,33,34,35,50,66,69,74,102,105,126,129,136,139,140,143,],[-3,-9,-7,-5,-6,-3,0,-8,-3,-4,-1,-2,-56,-54,-55,-62,-59,-57,-64,-58,-63,]),'COMP':([2,3,4,5,6,7,13,14,15,17,23,30,31,38,39,40,42,44,53,54,73,78,79,82,83,88,90,91,95,100,101,109,110,112,122,131,133,142,],[47,-24,-14,-20,-22,-23,-35,-29,-41,-19,-36,-30,-27,-21,-26,-42,-17,-28,-33,-16,-42,-18,-15,-34,-49,-13,-48,47,-25,-37,-47,-67,-40,-70,-69,-65,-68,-66,]),'LENGTH':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[16,-9,16,16,-7,-5,16,-6,16,16,-8,16,16,16,16,16,16,16,-4,16,16,16,16,16,16,16,16,16,16,-56,16,16,16,16,-54,16,-55,16,16,16,16,16,16,16,-62,-59,16,16,16,-57,-64,-58,16,-63,]),'RBRACE':([2,3,4,5,6,7,9,13,14,15,17,18,20,21,23,25,26,28,29,30,31,34,35,36,38,39,40,42,44,50,53,54,66,69,70,71,72,74,78,79,82,83,88,90,91,95,96,97,100,101,102,105,109,110,112,118,119,122,124,126,129,131,133,136,139,140,142,143,],[-32,-24,-14,-20,-22,-23,-9,-35,-29,-41,-19,-61,-7,-5,-36,-6,-46,-3,-10,-30,-27,-8,-3,-3,-21,-26,-42,-17,-28,-4,-33,-16,-1,-2,101,102,-51,-56,-18,-15,-34,-49,-13,-48,-31,-25,-44,-45,-37,-47,-54,-55,-67,-40,-70,-50,-52,-69,-60,-62,-59,-65,-68,-57,-64,-58,-66,-63,]),'COMMENT':([0,9,20,21,25,28,34,35,36,37,50,74,75,102,105,115,121,126,129,135,136,139,140,141,143,],[35,-9,-7,-5,-6,35,-8,35,35,75,-4,-56,75,-54,-55,75,75,-62,-59,75,-57,-64,-58,75,-63,]),'COMMA':([2,3,4,5,6,7,13,14,15,17,18,23,26,29,30,31,38,39,40,42,44,53,54,67,72,78,79,82,83,88,90,91,93,95,96,97,98,100,101,109,110,112,119,122,124,125,131,133,142,],[-32,-24,-14,-20,-22,-23,-35,-29,-41,-19,-61,-36,-46,-10,-30,-27,-21,-26,-42,-17,-28,-33,-16,99,103,-18,-15,-34,-49,-13,-48,-31,114,-25,-44,-45,116,-37,-47,-67,-40,-70,-52,-69,-60,132,-65,-68,-66,]),'LBRACE':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[36,-9,52,52,-7,-5,52,-6,36,52,-8,36,36,36,52,52,52,52,-4,52,52,52,52,52,52,52,52,52,52,-56,36,52,52,52,-54,52,-55,52,52,52,36,52,52,36,-62,-59,52,52,36,-57,-64,-58,36,-63,]),'MULTIPLICACIONESCALAR':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[19,-9,19,19,-7,-5,19,-6,19,19,-8,19,19,19,19,19,19,19,-4,19,19,19,19,19,19,19,19,19,19,-56,19,19,19,19,-54,19,-55,19,19,19,19,19,19,19,-62,-59,19,19,19,-57,-64,-58,19,-63,]),'DO':([0,9,20,21,25,28,34,35,36,37,50,74,75,102,105,115,121,126,129,135,136,139,140,141,143,],[37,-9,-7,-5,-6,37,-8,37,37,37,-4,-56,37,-54,-55,37,37,-62,-59,37,-57,-64,-58,37,-63,]),'EQUAL':([2,3,4,5,6,7,13,14,15,17,18,23,26,29,30,31,38,39,40,42,44,53,54,73,78,79,82,83,88,90,91,95,96,97,100,101,109,110,112,122,124,131,133,142,],[-32,-24,-14,-20,-22,-23,-35,-29,-41,-19,-61,-36,64,-10,-30,-27,-21,-26,-42,-17,-28,-33,-16,-42,-18,-15,-34,-49,-13,-48,-31,-25,-44,-45,-37,-47,-67,-40,-70,-69,-60,-65,-68,-66,]),'IF':([0,9,20,21,25,28,34,35,36,37,50,74,75,102,105,115,121,126,129,135,136,139,140,141,143,],[41,-9,-7,-5,-6,41,-8,41,41,41,-4,-56,41,-54,-55,41,41,-62,-59,41,-57,-64,-58,41,-63,]),'AOEQUAL':([2,3,4,5,6,7,13,14,15,17,18,23,26,29,30,31,38,39,40,42,44,53,54,73,78,79,82,83,88,90,91,95,96,97,100,101,109,110,112,122,124,131,133,142,],[-32,-24,-14,-20,-22,-23,-35,-29,-41,-19,-61,-36,63,-10,-30,-27,-21,-26,-42,-17,-28,-33,-16,-42,-18,-15,-34,-49,-13,-48,-31,-25,-44,-45,-37,-47,-67,-40,-70,-69,-60,-65,-68,-66,]),'RPAREN':([2,3,4,5,6,7,13,14,15,17,18,23,26,29,30,31,38,39,40,42,44,53,54,62,78,79,81,82,83,85,88,89,90,91,94,95,96,97,100,101,107,108,109,110,112,122,124,125,127,128,130,131,133,137,138,142,],[-32,-24,-14,-20,-22,-23,-35,-29,-41,-19,-61,-36,-46,-10,-30,-27,-21,-26,-42,-17,-28,-33,-16,95,-18,-15,109,-34,-49,-11,-13,112,-48,-31,115,-25,-44,-45,-37,-47,121,122,-67,-40,-70,-69,-60,131,133,134,-12,-65,-68,141,142,-66,]),'ELSE':([9,20,21,25,34,50,74,102,105,126,129,136,139,140,143,],[-9,-7,-5,-6,-8,-4,-56,-54,-55,-62,135,-57,-64,-58,-63,]),'WHILE':([0,9,20,21,25,28,34,35,36,37,50,74,75,76,102,105,115,121,126,129,135,136,139,140,141,143,],[22,-9,-7,-5,-6,22,-8,22,22,22,-4,-56,22,106,-54,-55,22,22,-62,-59,22,-57,-64,-58,22,-63,]),'SEMICOLON':([2,3,4,5,6,7,8,13,14,15,17,18,23,26,29,30,31,38,39,40,42,44,51,53,54,73,78,79,82,83,85,86,88,90,91,95,96,97,100,101,109,110,112,122,123,124,131,133,134,142,],[-32,-24,-14,-20,-22,-23,50,-35,-29,-41,-19,-61,-36,-46,-10,-30,-27,-21,-26,-42,-17,-28,-12,-33,-16,-42,-18,-15,-34,-49,-11,111,-13,-48,-31,-25,-44,-45,-37,-47,-67,-40,-70,-69,130,-60,-65,-68,139,-66,]),'AO':([0,3,4,5,6,7,9,11,12,13,14,15,17,20,21,23,24,25,28,30,31,32,34,35,36,37,38,39,40,42,43,44,46,47,49,50,51,53,54,55,56,58,59,60,61,63,64,65,73,74,75,77,78,79,80,82,83,88,90,95,99,100,101,102,104,105,109,110,111,112,113,114,115,116,120,121,122,126,129,130,131,132,133,135,136,139,140,141,142,143,],[43,-24,-14,-20,-22,-23,-9,43,43,55,-29,-41,-19,-7,-5,-36,43,-6,43,-30,-27,43,-8,43,43,43,-21,-26,-42,-17,43,-28,43,43,43,-4,43,-33,-16,43,43,43,43,43,43,43,43,43,-42,-56,43,43,-18,-15,43,55,-49,-13,-48,-25,43,-37,-47,-54,43,-55,-67,-40,43,-70,43,43,43,43,43,43,-69,-62,-59,43,-65,43,-68,43,-57,-64,-58,43,-66,-63,]),'VAR':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,48,49,50,51,52,55,56,57,58,59,60,61,63,64,65,74,75,77,80,99,102,103,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[31,-9,31,31,-7,-5,31,-6,31,31,-8,31,31,31,31,31,31,31,31,-4,31,31,31,31,31,31,31,31,31,31,31,31,-56,31,31,31,31,-54,31,31,-55,31,31,31,31,31,31,31,-62,-59,31,31,31,-57,-64,-58,31,-63,]),'PRINT':([0,9,11,12,20,21,24,25,28,32,34,35,36,37,43,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[45,-9,45,45,-7,-5,45,-6,45,45,-8,45,45,45,45,45,45,45,-4,45,45,45,45,45,45,45,45,45,45,-56,45,45,45,45,-54,45,-55,45,45,45,45,45,45,45,-62,-59,45,45,45,-57,-64,-58,45,-63,]),'LPAREN':([0,1,9,10,11,12,16,19,20,21,22,24,25,27,28,32,34,35,36,37,41,43,45,46,47,49,50,51,55,56,58,59,60,61,63,64,65,74,75,77,80,99,102,104,105,106,111,113,114,115,116,120,121,126,129,130,132,135,136,139,140,141,143,],[24,46,-9,51,24,24,56,60,-7,-5,61,24,-6,65,24,24,-8,24,24,24,77,24,80,24,24,24,-4,24,24,24,24,24,24,24,24,24,24,-56,24,24,24,24,-54,24,-55,120,24,24,24,24,24,24,24,-62,-59,24,24,24,-57,-64,-58,24,-63,]),'RBRACKET':([2,3,4,5,6,7,13,14,15,17,18,23,26,29,30,31,38,39,40,42,44,53,54,67,68,78,79,82,83,84,88,90,91,95,96,97,100,101,109,110,112,117,122,124,131,133,142,],[-32,-24,-14,-20,-22,-23,-35,-29,-41,-19,-61,-36,-46,-10,-30,-27,-21,-26,-42,-17,-28,-33,-16,-39,100,-18,-15,-34,-49,110,-13,-48,-31,-25,-44,-45,-37,-47,-67,-40,-70,-38,-69,-60,-65,-68,-66,]),'DOT':([3,5,6,7,14,15,17,30,31,38,39,40,44,73,83,90,95,100,101,109,110,112,122,131,133,142,],[-24,48,-22,-23,-29,-41,57,-30,-27,-21,-26,-42,-28,-42,-49,-48,-25,-37,-47,-67,-40,-70,-69,-65,-68,-66,]),'QUESTION':([2,3,4,5,6,7,13,14,15,17,18,23,30,31,38,39,40,42,44,53,54,73,78,79,82,83,88,90,91,95,100,101,109,110,112,122,131,133,142,],[-32,-24,-14,-20,-22,-23,-35,-29,-41,-19,59,-36,-30,-27,-21,-26,-42,-17,-28,-33,-16,-42,-18,-15,-34,-49,-13,-48,-31,-25,-37,-47,-67,-40,-70,-69,-65,-68,-66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'if':([0,28,35,36,37,75,115,121,135,141,],[25,25,25,25,25,25,25,25,25,25,]),'expressionTernaryCond':([0,24,28,32,35,36,37,46,49,51,56,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'expressionComp':([0,24,28,32,35,36,37,46,49,51,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[2,2,2,2,2,2,2,2,2,2,2,91,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'memberAccess':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'factorReg':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'statement':([0,28,35,36,37,75,115,121,135,141,],[28,28,28,28,74,74,74,74,74,74,]),'factorExp':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'bool_atom':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'vector_items':([32,99,],[68,117,]),'expressionAssign':([0,24,28,32,35,36,37,46,49,51,56,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,96,97,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'expression':([0,24,28,32,35,36,37,46,49,51,56,59,60,61,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[8,62,8,67,8,8,8,81,84,85,89,92,93,94,98,8,107,108,67,119,123,124,125,8,127,128,8,85,138,8,8,]),'do_while':([0,28,35,36,37,75,115,121,135,141,],[9,9,9,9,9,9,9,9,9,9,]),'expressionVector':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'aritExp':([0,24,28,32,35,36,37,46,47,49,51,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[13,13,13,13,13,13,13,13,82,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'reg_items':([36,52,103,],[70,70,118,]),'code':([0,28,35,36,],[33,66,69,71,]),'optional_expr':([51,130,],[86,137,]),'for':([0,28,35,36,37,75,115,121,135,141,],[34,34,34,34,34,34,34,34,34,34,]),'expressionBoolOp':([0,24,28,32,35,36,37,46,49,51,56,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'singleStatement':([37,75,115,121,135,141,],[76,105,126,129,140,143,]),'else':([129,],[136,]),'factorNumExp':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'expressionFunction':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'block':([0,28,35,36,37,75,115,121,135,141,],[21,21,21,21,21,21,21,21,21,21,]),'factorVar':([0,11,12,24,28,32,35,36,37,43,46,47,48,49,51,52,55,56,57,58,59,60,61,63,64,65,75,77,80,99,103,104,111,113,114,115,116,120,121,130,132,135,141,],[40,40,40,40,40,40,40,73,40,40,40,40,83,40,40,87,40,40,90,40,40,40,40,40,40,40,40,40,40,40,87,40,40,40,40,40,40,40,40,40,40,40,40,]),'while':([0,28,35,36,37,75,115,121,135,141,],[20,20,20,20,20,20,20,20,20,20,]),'unaryExp2':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'expressionVectorAt':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'unaryExp':([0,11,12,24,28,32,35,36,37,43,46,47,49,51,55,56,58,59,60,61,63,64,65,75,77,80,99,104,111,113,114,115,116,120,121,130,132,135,141,],[4,53,54,4,4,4,4,4,4,79,4,4,4,4,88,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'reg_field':([36,52,103,],[72,72,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> statement code','code',2,'p_code_statement','parser_rules_v2.py',50),
  ('code -> COMMENT code','code',2,'p_code_comment','parser_rules_v2.py',56),
  ('code -> <empty>','code',0,'p_code_empty','parser_rules_v2.py',62),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_1','parser_rules_v2.py',66),
  ('statement -> block','statement',1,'p_statement_block','parser_rules_v2.py',71),
  ('statement -> if','statement',1,'p_statement_if','parser_rules_v2.py',74),
  ('statement -> while','statement',1,'p_statement_while','parser_rules_v2.py',78),
  ('statement -> for','statement',1,'p_statement_for','parser_rules_v2.py',82),
  ('statement -> do_while','statement',1,'p_statement_do_while','parser_rules_v2.py',86),
  ('expression -> expressionAssign','expression',1,'p_expression_aritmethic','parser_rules_v2.py',91),
  ('optional_expr -> expression','optional_expr',1,'p_optional_expr','parser_rules_v2.py',95),
  ('optional_expr -> <empty>','optional_expr',0,'p_optional_expr_empty','parser_rules_v2.py',99),
  ('aritExp -> aritExp AO unaryExp','aritExp',3,'p_aritExp','parser_rules_v2.py',104),
  ('aritExp -> unaryExp','aritExp',1,'p_aritExp_unary','parser_rules_v2.py',123),
  ('unaryExp -> AO unaryExp','unaryExp',2,'p_unaryExp','parser_rules_v2.py',127),
  ('unaryExp -> DOUBLE_AO unaryExp','unaryExp',2,'p_unaryExp_double','parser_rules_v2.py',140),
  ('unaryExp -> unaryExp2','unaryExp',1,'p_unaryExp_double_unaryExp2','parser_rules_v2.py',150),
  ('unaryExp2 -> unaryExp2 DOUBLE_AO','unaryExp2',2,'p_unaryExp_double2','parser_rules_v2.py',154),
  ('unaryExp2 -> memberAccess','unaryExp2',1,'p_unaryExp2_memberAccess','parser_rules_v2.py',165),
  ('unaryExp2 -> factorExp','unaryExp2',1,'p_unaryExp2_factor','parser_rules_v2.py',169),
  ('factorExp -> factorNumExp','factorExp',1,'p_factorExp_Num','parser_rules_v2.py',173),
  ('factorExp -> bool_atom','factorExp',1,'p_factorExp_Bool','parser_rules_v2.py',177),
  ('factorExp -> expressionVectorAt','factorExp',1,'p_factorExp_VectorAt','parser_rules_v2.py',181),
  ('factorExp -> factorReg','factorExp',1,'p_factorExp_Reg','parser_rules_v2.py',185),
  ('factorExp -> LPAREN expression RPAREN','factorExp',3,'p_factorExp_paren','parser_rules_v2.py',189),
  ('factorExp -> expressionFunction','factorExp',1,'p_factorExp_function','parser_rules_v2.py',195),
  ('factorVar -> VAR','factorVar',1,'p_factorVarExp','parser_rules_v2.py',199),
  ('factorNumExp -> NUMBER','factorNumExp',1,'p_factorNumExp','parser_rules_v2.py',203),
  ('bool_atom -> TRUE','bool_atom',1,'p_bool_true','parser_rules_v2.py',209),
  ('bool_atom -> FALSE','bool_atom',1,'p_bool_false','parser_rules_v2.py',213),
  ('expressionBoolOp -> expressionBoolOp BOOL_OP expressionComp','expressionBoolOp',3,'p_bool_op','parser_rules_v2.py',217),
  ('expressionBoolOp -> expressionComp','expressionBoolOp',1,'p_bool_op_comp','parser_rules_v2.py',226),
  ('unaryExp -> NOT unaryExp','unaryExp',2,'p_bool_neg','parser_rules_v2.py',230),
  ('expressionComp -> expressionComp COMP aritExp','expressionComp',3,'p_bool_comp','parser_rules_v2.py',236),
  ('expressionComp -> aritExp','expressionComp',1,'p_bool_comp_arit','parser_rules_v2.py',248),
  ('unaryExp -> STRING','unaryExp',1,'p_string','parser_rules_v2.py',253),
  ('expressionVector -> LBRACKET vector_items RBRACKET','expressionVector',3,'p_vector','parser_rules_v2.py',258),
  ('vector_items -> expression COMMA vector_items','vector_items',3,'p_vector_items','parser_rules_v2.py',263),
  ('vector_items -> expression','vector_items',1,'p_vector_single_item','parser_rules_v2.py',272),
  ('expressionVectorAt -> expressionVectorAt LBRACKET expression RBRACKET','expressionVectorAt',4,'p_vector_at','parser_rules_v2.py',278),
  ('expressionVectorAt -> expressionVector','expressionVectorAt',1,'p_vector_at_vector','parser_rules_v2.py',291),
  ('expressionVectorAt -> factorVar','expressionVectorAt',1,'p_vector_at_var','parser_rules_v2.py',295),
  ('expressionVectorAt -> memberAccess','expressionVectorAt',1,'p_vector_at_memberAccess','parser_rules_v2.py',299),
  ('expressionAssign -> expressionTernaryCond AOEQUAL expressionAssign','expressionAssign',3,'p_aoEqual','parser_rules_v2.py',318),
  ('expressionAssign -> expressionTernaryCond EQUAL expressionAssign','expressionAssign',3,'p_equals','parser_rules_v2.py',413),
  ('expressionAssign -> expressionTernaryCond','expressionAssign',1,'p_assign_TernaryCond','parser_rules_v2.py',496),
  ('factorReg -> LBRACE reg_items RBRACE','factorReg',3,'p_register','parser_rules_v2.py',501),
  ('memberAccess -> memberAccess DOT factorVar','memberAccess',3,'p_memberAccess','parser_rules_v2.py',507),
  ('memberAccess -> factorExp DOT factorVar','memberAccess',3,'p_memberAccess_factorExp','parser_rules_v2.py',514),
  ('reg_items -> reg_field COMMA reg_items','reg_items',3,'p_reg_items','parser_rules_v2.py',552),
  ('reg_items -> reg_field','reg_items',1,'p_reg_single_item','parser_rules_v2.py',556),
  ('reg_field -> factorVar COLON expression','reg_field',3,'p_reg_field','parser_rules_v2.py',560),
  ('comments -> <empty>','comments',0,'p_comments_empty','parser_rules_v2.py',570),
  ('block -> LBRACE code RBRACE','block',3,'p_block','parser_rules_v2.py',575),
  ('singleStatement -> COMMENT singleStatement','singleStatement',2,'p_single_statement_comment','parser_rules_v2.py',581),
  ('singleStatement -> statement','singleStatement',1,'p_single_statement','parser_rules_v2.py',586),
  ('if -> IF LPAREN expression RPAREN singleStatement else','if',6,'p_if','parser_rules_v2.py',592),
  ('else -> ELSE singleStatement','else',2,'p_else','parser_rules_v2.py',600),
  ('else -> <empty>','else',0,'p_else_empty','parser_rules_v2.py',604),
  ('expressionTernaryCond -> expressionBoolOp QUESTION expression COLON expression','expressionTernaryCond',5,'p_ternaryConditiopnal','parser_rules_v2.py',609),
  ('expressionTernaryCond -> expressionBoolOp','expressionTernaryCond',1,'p_ternaryConditiopnal_BoolOp','parser_rules_v2.py',618),
  ('while -> WHILE LPAREN expression RPAREN singleStatement','while',5,'p_while','parser_rules_v2.py',623),
  ('for -> FOR LPAREN optional_expr SEMICOLON expression SEMICOLON optional_expr RPAREN singleStatement','for',9,'p_for','parser_rules_v2.py',630),
  ('do_while -> DO singleStatement WHILE LPAREN expression RPAREN SEMICOLON','do_while',7,'p_do_while','parser_rules_v2.py',639),
  ('expressionFunction -> MULTIPLICACIONESCALAR LPAREN expression COMMA expression RPAREN','expressionFunction',6,'p_scalarMultiplication_1','parser_rules_v2.py',648),
  ('expressionFunction -> MULTIPLICACIONESCALAR LPAREN expression COMMA expression COMMA expression RPAREN','expressionFunction',8,'p_scalarMultiplication_2','parser_rules_v2.py',661),
  ('expressionFunction -> CAPITALIZAR LPAREN expression RPAREN','expressionFunction',4,'p_capitalize','parser_rules_v2.py',676),
  ('expressionFunction -> COLINEALES LPAREN expression COMMA expression RPAREN','expressionFunction',6,'p_collinear','parser_rules_v2.py',684),
  ('expressionFunction -> PRINT LPAREN expression RPAREN','expressionFunction',4,'p_print','parser_rules_v2.py',698),
  ('expressionFunction -> LENGTH LPAREN expression RPAREN','expressionFunction',4,'p_length','parser_rules_v2.py',703),
]
