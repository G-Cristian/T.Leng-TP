
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '4172BFA87ECC31A529781FFDC23EF7BB'
    
_lr_action_items = {'LPAREN':([0,2,5,6,7,9,12,13,15,20,22,23,25,27,28,29,32,35,36,37,38,40,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,93,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[20,20,47,48,20,50,20,52,-9,20,20,59,20,20,-6,-5,-7,65,66,20,20,72,-8,20,20,20,20,20,20,-4,20,20,20,20,20,20,20,20,-51,20,20,20,-49,-50,108,20,20,20,20,20,20,20,20,-54,-57,20,20,20,-52,-53,-59,20,-58,]),'ELSE':([15,28,29,32,41,53,70,87,92,118,120,128,132,133,136,],[-9,-6,-5,-7,-8,-4,-51,-49,-50,127,-57,-52,-53,-59,-58,]),'SEMICOLON':([1,3,4,8,10,11,14,16,17,18,19,21,24,26,30,31,33,34,39,43,46,49,56,59,67,73,75,80,81,82,84,85,86,88,99,100,102,109,111,115,116,123,126,129,134,],[-43,-40,-19,-27,-28,-34,-20,53,-33,-24,-25,-17,-30,-39,-14,-56,-26,-21,-22,-10,-15,-31,-18,-12,-16,-41,-42,-13,-23,-35,104,-11,-32,-29,-65,-62,-64,-38,-44,125,-55,-60,-63,133,-61,]),'AO':([0,2,3,4,7,8,10,11,12,14,15,17,18,19,20,21,22,25,26,27,28,29,30,32,33,34,37,38,39,41,44,45,46,47,48,49,50,52,53,54,56,59,60,63,64,65,66,67,68,70,71,72,80,81,82,83,86,87,92,99,100,101,102,104,105,106,107,108,109,110,113,118,120,123,124,125,126,127,128,132,133,134,135,136,],[2,2,-40,-19,2,-27,-28,-34,2,-20,-9,54,-24,-25,2,-17,2,2,-39,2,-6,-5,-14,-7,-26,-21,2,2,-22,-8,2,2,-15,2,2,-31,2,2,-4,2,-18,2,2,2,2,2,2,-16,2,-51,2,2,-13,-23,-35,2,54,-49,-50,-65,-62,2,-64,2,2,2,2,2,-38,2,2,-54,-57,-60,2,2,-63,2,-52,-53,-59,-61,2,-58,]),'RBRACKET':([1,3,4,8,10,11,14,17,18,19,21,24,26,30,31,33,34,39,43,46,49,56,57,58,67,73,75,80,81,82,86,88,94,99,100,102,103,109,111,116,123,126,134,],[-43,-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,-30,-39,-14,-56,-26,-21,-22,-10,-15,-31,-18,82,-37,-16,-41,-42,-13,-23,-35,-32,-29,109,-65,-62,-64,-36,-38,-44,-55,-60,-63,-61,]),'COMMA':([1,3,4,8,10,11,14,17,18,19,21,24,26,30,31,33,34,39,43,46,49,56,58,67,73,75,78,80,81,82,86,88,90,97,99,100,102,109,111,114,116,122,123,126,134,],[-43,-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,-30,-39,-14,-56,-26,-21,-22,-10,-15,-31,-18,83,-16,-41,-42,101,-13,-23,-35,-32,-29,106,112,-65,-62,-64,-38,-44,124,-55,-47,-60,-63,-61,]),'RPAREN':([1,3,4,8,10,11,14,17,18,19,21,24,26,30,31,33,34,39,43,46,49,55,56,67,73,75,76,77,79,80,81,82,85,86,88,91,95,99,100,102,109,111,114,116,117,119,123,125,126,130,131,134,],[-43,-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,-30,-39,-14,-56,-26,-21,-22,-10,-15,-31,81,-18,-16,-41,-42,99,100,102,-13,-23,-35,-11,-32,-29,107,110,-65,-62,-64,-38,-44,123,-55,126,129,-60,-12,-63,134,135,-61,]),'$end':([0,12,15,25,28,29,32,41,42,51,53,61,70,87,92,118,120,128,132,133,136,],[-3,-3,-9,-3,-6,-5,-7,-8,0,-2,-4,-1,-51,-49,-50,-54,-57,-52,-53,-59,-58,]),'IF':([0,12,15,25,27,28,29,32,38,41,53,68,70,87,92,107,110,118,120,127,128,132,133,135,136,],[36,36,-9,36,36,-6,-5,-7,36,-8,-4,36,-51,-49,-50,36,36,-54,-57,36,-52,-53,-59,36,-58,]),'CAPITALIZAR':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[6,6,6,6,-9,6,6,6,6,-6,-5,-7,6,6,-8,6,6,6,6,6,6,-4,6,6,6,6,6,6,6,6,-51,6,6,6,-49,-50,6,6,6,6,6,6,6,6,-54,-57,6,6,6,-52,-53,-59,6,-58,]),'LBRACE':([0,12,15,25,27,28,29,32,38,41,45,53,68,70,87,92,107,110,118,120,127,128,132,133,135,136,],[27,27,-9,27,27,-6,-5,-7,27,-8,74,-4,27,-51,-49,-50,27,27,-54,-57,27,-52,-53,-59,27,-58,]),'NOT':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[7,7,7,7,-9,7,7,7,7,-6,-5,-7,7,7,-8,7,7,7,7,7,7,-4,7,7,7,7,7,7,7,7,-51,7,7,7,-49,-50,7,7,7,7,7,7,7,7,-54,-57,7,7,7,-52,-53,-59,7,-58,]),'TRUE':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[8,8,8,8,-9,8,8,8,8,-6,-5,-7,8,8,-8,8,8,8,8,8,8,-4,8,8,8,8,8,8,8,8,-51,8,8,8,-49,-50,8,8,8,8,8,8,8,8,-54,-57,8,8,8,-52,-53,-59,8,-58,]),'EQUAL':([1,3,4,8,10,11,14,17,18,19,21,24,26,30,31,33,34,39,43,46,49,56,67,73,75,80,81,82,86,88,99,100,102,109,111,116,123,126,134,],[45,-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,-30,-39,-14,-56,-26,-21,-22,-10,-15,-31,-18,-16,-41,-42,-13,-23,-35,-32,-29,-65,-62,-64,-38,-44,-55,-60,-63,-61,]),'LBRACKET':([0,2,3,7,12,15,19,20,22,25,26,27,28,29,32,37,38,39,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,82,83,87,92,101,104,105,106,107,108,109,110,113,118,120,124,125,127,128,132,133,135,136,],[22,22,-40,22,22,-9,-25,22,22,22,-39,22,-6,-5,-7,22,22,71,-8,22,22,22,22,22,22,-4,22,22,22,22,22,22,22,22,-51,22,22,-35,22,-49,-50,22,22,22,22,22,22,-38,22,22,-54,-57,22,22,22,-52,-53,-59,22,-58,]),'PRINT':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[13,13,13,13,-9,13,13,13,13,-6,-5,-7,13,13,-8,13,13,13,13,13,13,-4,13,13,13,13,13,13,13,13,-51,13,13,13,-49,-50,13,13,13,13,13,13,13,13,-54,-57,13,13,13,-52,-53,-59,13,-58,]),'MULTIPLICACIONESCALAR':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[9,9,9,9,-9,9,9,9,9,-6,-5,-7,9,9,-8,9,9,9,9,9,9,-4,9,9,9,9,9,9,9,9,-51,9,9,9,-49,-50,9,9,9,9,9,9,9,9,-54,-57,9,9,9,-52,-53,-59,9,-58,]),'FALSE':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[10,10,10,10,-9,10,10,10,10,-6,-5,-7,10,10,-8,10,10,10,10,10,10,-4,10,10,10,10,10,10,10,10,-51,10,10,10,-49,-50,10,10,10,10,10,10,10,10,-54,-57,10,10,10,-52,-53,-59,10,-58,]),'RBRACE':([1,3,4,8,10,11,12,14,15,17,18,19,21,24,25,26,27,28,29,30,31,32,33,34,39,41,43,46,49,51,53,56,61,62,67,70,73,75,80,81,82,86,87,88,92,96,97,99,100,102,109,111,116,118,120,121,122,123,126,128,132,133,134,136,],[-43,-40,-19,-27,-28,-34,-3,-20,-9,-33,-24,-25,-17,-30,-3,-39,-3,-6,-5,-14,-56,-7,-26,-21,-22,-8,-10,-15,-31,-2,-4,-18,-1,87,-16,-51,-41,-42,-13,-23,-35,-32,-49,-29,-50,111,-46,-65,-62,-64,-38,-44,-55,-54,-57,-45,-47,-60,-63,-52,-53,-59,-61,-58,]),'STRING':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[11,11,11,11,-9,11,11,11,11,-6,-5,-7,11,11,-8,11,11,11,11,11,11,-4,11,11,11,11,11,11,11,11,-51,11,11,11,-49,-50,11,11,11,11,11,11,11,11,-54,-57,11,11,11,-52,-53,-59,11,-58,]),'NUMBER':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[33,33,33,33,-9,33,33,33,33,-6,-5,-7,33,33,-8,33,33,33,33,33,33,-4,33,33,33,33,33,33,33,33,-51,33,33,33,-49,-50,33,33,33,33,33,33,33,33,-54,-57,33,33,33,-52,-53,-59,33,-58,]),'COMP':([3,4,8,10,11,14,17,18,19,21,24,26,30,33,34,39,46,49,56,67,80,81,82,86,88,99,100,102,109,123,126,134,],[-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,60,-39,-14,-26,-21,-22,-15,-31,-18,-16,-13,-23,-35,-32,60,-65,-62,-64,-38,-60,-63,-61,]),'COLON':([1,3,4,8,10,11,14,17,18,19,21,24,26,30,31,33,34,39,43,46,49,56,67,73,75,80,81,82,86,88,89,98,99,100,102,109,111,116,123,126,134,],[-43,-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,-30,-39,-14,-56,-26,-21,-22,-10,-15,-31,-18,-16,-41,-42,-13,-23,-35,-32,-29,105,113,-65,-62,-64,-38,-44,-55,-60,-63,-61,]),'QUESTION':([3,4,8,10,11,14,17,18,19,21,24,26,30,31,33,34,39,46,49,56,67,80,81,82,86,88,99,100,102,109,123,126,134,],[-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,-30,-39,-14,64,-26,-21,-22,-15,-31,-18,-16,-13,-23,-35,-32,-29,-65,-62,-64,-38,-60,-63,-61,]),'COMMENT':([0,12,15,25,27,28,29,32,38,41,53,68,70,87,92,107,110,118,120,127,128,132,133,135,136,],[12,12,-9,12,12,-6,-5,-7,68,-8,-4,68,-51,-49,-50,68,68,-54,-57,68,-52,-53,-59,68,-58,]),'AOEQUAL':([1,3,4,8,10,11,14,17,18,19,21,24,26,30,31,33,34,39,43,46,49,56,67,73,75,80,81,82,86,88,99,100,102,109,111,116,123,126,134,],[44,-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,-30,-39,-14,-56,-26,-21,-22,-10,-15,-31,-18,-16,-41,-42,-13,-23,-35,-32,-29,-65,-62,-64,-38,-44,-55,-60,-63,-61,]),'DOUBLE_AO':([0,2,3,4,7,8,10,12,14,15,18,19,20,21,22,25,26,27,28,29,32,33,34,37,38,39,41,44,45,47,48,50,52,53,54,56,59,60,63,64,65,66,68,70,71,72,81,82,83,87,92,99,100,101,102,104,105,106,107,108,109,110,113,118,120,123,124,125,126,127,128,132,133,134,135,136,],[37,37,-40,-19,37,-27,-28,37,-20,-9,-24,-25,37,56,37,37,-39,37,-6,-5,-7,-26,-21,37,37,-22,-8,37,37,37,37,37,37,-4,37,-18,37,37,37,37,37,37,37,-51,37,37,-23,-35,37,-49,-50,-65,-62,37,-64,37,37,37,37,37,-38,37,37,-54,-57,-60,37,37,-63,37,-52,-53,-59,-61,37,-58,]),'BOOL_OP':([3,4,8,10,11,14,17,18,19,21,24,26,30,31,33,34,39,46,49,56,67,80,81,82,86,88,99,100,102,109,123,126,134,],[-40,-19,-27,-28,-34,-20,-33,-24,-25,-17,-30,-39,-14,63,-26,-21,-22,-15,-31,-18,-16,-13,-23,-35,-32,-29,-65,-62,-64,-38,-60,-63,-61,]),'LENGTH':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[5,5,5,5,-9,5,5,5,5,-6,-5,-7,5,5,-8,5,5,5,5,5,5,-4,5,5,5,5,5,5,5,5,-51,5,5,5,-49,-50,5,5,5,5,5,5,5,5,-54,-57,5,5,5,-52,-53,-59,5,-58,]),'VAR':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,74,83,87,92,101,104,105,106,107,108,110,112,113,118,120,124,125,127,128,132,133,135,136,],[19,19,19,19,-9,19,19,19,19,-6,-5,-7,19,19,-8,19,19,19,19,19,19,-4,19,19,19,19,19,19,19,19,-51,19,19,19,19,-49,-50,19,19,19,19,19,19,19,19,19,-54,-57,19,19,19,-52,-53,-59,19,-58,]),'FOR':([0,12,15,25,27,28,29,32,38,41,53,68,70,87,92,107,110,118,120,127,128,132,133,135,136,],[23,23,-9,23,23,-6,-5,-7,23,-8,-4,23,-51,-49,-50,23,23,-54,-57,23,-52,-53,-59,23,-58,]),'DO':([0,12,15,25,27,28,29,32,38,41,53,68,70,87,92,107,110,118,120,127,128,132,133,135,136,],[38,38,-9,38,38,-6,-5,-7,38,-8,-4,38,-51,-49,-50,38,38,-54,-57,38,-52,-53,-59,38,-58,]),'WHILE':([0,12,15,25,27,28,29,32,38,41,53,68,69,70,87,92,107,110,118,120,127,128,132,133,135,136,],[40,40,-9,40,40,-6,-5,-7,40,-8,-4,40,93,-51,-49,-50,40,40,-54,-57,40,-52,-53,-59,40,-58,]),'COLINEALES':([0,2,7,12,15,20,22,25,27,28,29,32,37,38,41,44,45,47,48,50,52,53,54,59,60,63,64,65,66,68,70,71,72,83,87,92,101,104,105,106,107,108,110,113,118,120,124,125,127,128,132,133,135,136,],[35,35,35,35,-9,35,35,35,35,-6,-5,-7,35,35,-8,35,35,35,35,35,35,-4,35,35,35,35,35,35,35,35,-51,35,35,35,-49,-50,35,35,35,35,35,35,35,35,-54,-57,35,35,35,-52,-53,-59,35,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressionTernaryCond':([0,12,20,22,25,27,38,44,45,47,48,50,52,59,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'reg_field':([74,112,],[97,97,]),'unaryExp2':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'expressionComp':([0,12,20,22,25,27,38,44,45,47,48,50,52,59,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,88,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'factorVar':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,74,83,101,104,105,106,107,108,110,112,113,124,125,127,135,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,98,3,3,3,3,3,3,3,3,98,3,3,3,3,3,]),'vector_items':([22,83,],[57,103,]),'factorExp':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'expressionVector':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'reg_items':([74,112,],[96,121,]),'if':([0,12,25,27,38,68,107,110,127,135,],[28,28,28,28,28,28,28,28,28,28,]),'while':([0,12,25,27,38,68,107,110,127,135,],[32,32,32,32,32,32,32,32,32,32,]),'block':([0,12,25,27,38,68,107,110,127,135,],[29,29,29,29,29,29,29,29,29,29,]),'else':([118,],[128,]),'unaryExp':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[30,46,49,30,30,30,30,30,67,30,30,30,30,30,30,30,80,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'statement':([0,12,25,27,38,68,107,110,127,135,],[25,25,25,25,70,70,70,70,70,70,]),'expressionBoolOp':([0,12,20,22,25,27,38,44,45,47,48,50,52,59,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'optional_expr':([59,125,],[84,131,]),'bool_atom':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'for':([0,12,25,27,38,68,107,110,127,135,],[41,41,41,41,41,41,41,41,41,41,]),'expressionFunction':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'factorNumExp':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'do_while':([0,12,25,27,38,68,107,110,127,135,],[15,15,15,15,15,15,15,15,15,15,]),'expression':([0,12,20,22,25,27,38,47,48,50,52,59,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[16,16,55,58,16,16,16,76,77,78,79,85,89,90,91,16,94,95,58,114,115,116,117,16,119,16,122,130,85,16,16,]),'singleStatement':([38,68,107,110,127,135,],[69,92,118,120,132,136,]),'expressionVectorAt':([0,2,7,12,20,22,25,27,37,38,44,45,47,48,50,52,54,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'aritExp':([0,12,20,22,25,27,38,44,45,47,48,50,52,59,60,63,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,86,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'code':([0,12,25,27,],[42,51,61,62,]),'expressionAssign':([0,12,20,22,25,27,38,44,45,47,48,50,52,59,64,65,66,68,71,72,83,101,104,105,106,107,108,110,113,124,125,127,135,],[43,43,43,43,43,43,43,73,75,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> statement code','code',2,'p_code_statement','parser_rules_v2.py',23),
  ('code -> COMMENT code','code',2,'p_code_comment','parser_rules_v2.py',29),
  ('code -> <empty>','code',0,'p_code_empty','parser_rules_v2.py',35),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_1','parser_rules_v2.py',39),
  ('statement -> block','statement',1,'p_statement_block','parser_rules_v2.py',44),
  ('statement -> if','statement',1,'p_statement_if','parser_rules_v2.py',47),
  ('statement -> while','statement',1,'p_statement_while','parser_rules_v2.py',51),
  ('statement -> for','statement',1,'p_statement_for','parser_rules_v2.py',55),
  ('statement -> do_while','statement',1,'p_statement_do_while','parser_rules_v2.py',59),
  ('expression -> expressionAssign','expression',1,'p_expression_aritmethic','parser_rules_v2.py',64),
  ('optional_expr -> expression','optional_expr',1,'p_optional_expr','parser_rules_v2.py',68),
  ('optional_expr -> <empty>','optional_expr',0,'p_optional_expr_empty','parser_rules_v2.py',72),
  ('aritExp -> aritExp AO unaryExp','aritExp',3,'p_aritExp','parser_rules_v2.py',77),
  ('aritExp -> unaryExp','aritExp',1,'p_aritExp_unary','parser_rules_v2.py',96),
  ('unaryExp -> AO unaryExp','unaryExp',2,'p_unaryExp','parser_rules_v2.py',100),
  ('unaryExp -> DOUBLE_AO unaryExp','unaryExp',2,'p_unaryExp_double','parser_rules_v2.py',113),
  ('unaryExp -> unaryExp2','unaryExp',1,'p_unaryExp_double_unaryExp2','parser_rules_v2.py',123),
  ('unaryExp2 -> unaryExp2 DOUBLE_AO','unaryExp2',2,'p_unaryExp_double2','parser_rules_v2.py',127),
  ('unaryExp2 -> factorExp','unaryExp2',1,'p_unaryExp2_factor','parser_rules_v2.py',138),
  ('factorExp -> factorNumExp','factorExp',1,'p_factorExp_Num','parser_rules_v2.py',142),
  ('factorExp -> bool_atom','factorExp',1,'p_factorExp_Bool','parser_rules_v2.py',146),
  ('factorExp -> expressionVectorAt','factorExp',1,'p_factorExp_VectorAt','parser_rules_v2.py',150),
  ('factorExp -> LPAREN expression RPAREN','factorExp',3,'p_factorExp_paren','parser_rules_v2.py',154),
  ('factorExp -> expressionFunction','factorExp',1,'p_factorExp_function','parser_rules_v2.py',160),
  ('factorVar -> VAR','factorVar',1,'p_factorVarExp','parser_rules_v2.py',164),
  ('factorNumExp -> NUMBER','factorNumExp',1,'p_factorNumExp','parser_rules_v2.py',168),
  ('bool_atom -> TRUE','bool_atom',1,'p_bool_true','parser_rules_v2.py',174),
  ('bool_atom -> FALSE','bool_atom',1,'p_bool_false','parser_rules_v2.py',178),
  ('expressionBoolOp -> expressionBoolOp BOOL_OP expressionComp','expressionBoolOp',3,'p_bool_op','parser_rules_v2.py',182),
  ('expressionBoolOp -> expressionComp','expressionBoolOp',1,'p_bool_op_comp','parser_rules_v2.py',191),
  ('unaryExp -> NOT unaryExp','unaryExp',2,'p_bool_neg','parser_rules_v2.py',195),
  ('expressionComp -> expressionComp COMP aritExp','expressionComp',3,'p_bool_comp','parser_rules_v2.py',201),
  ('expressionComp -> aritExp','expressionComp',1,'p_bool_comp_arit','parser_rules_v2.py',213),
  ('unaryExp -> STRING','unaryExp',1,'p_string','parser_rules_v2.py',218),
  ('expressionVector -> LBRACKET vector_items RBRACKET','expressionVector',3,'p_vector','parser_rules_v2.py',223),
  ('vector_items -> expression COMMA vector_items','vector_items',3,'p_vector_items','parser_rules_v2.py',228),
  ('vector_items -> expression','vector_items',1,'p_vector_single_item','parser_rules_v2.py',237),
  ('expressionVectorAt -> expressionVectorAt LBRACKET expression RBRACKET','expressionVectorAt',4,'p_vector_at','parser_rules_v2.py',243),
  ('expressionVectorAt -> expressionVector','expressionVectorAt',1,'p_vector_at_vector','parser_rules_v2.py',256),
  ('expressionVectorAt -> factorVar','expressionVectorAt',1,'p_vector_at_var','parser_rules_v2.py',260),
  ('expressionAssign -> expressionTernaryCond AOEQUAL expressionAssign','expressionAssign',3,'p_aoEqual','parser_rules_v2.py',279),
  ('expressionAssign -> expressionTernaryCond EQUAL expressionAssign','expressionAssign',3,'p_equals','parser_rules_v2.py',359),
  ('expressionAssign -> expressionTernaryCond','expressionAssign',1,'p_assign_TernaryCond','parser_rules_v2.py',438),
  ('expressionAssign -> expressionTernaryCond EQUAL LBRACE reg_items RBRACE','expressionAssign',5,'p_reg_assign','parser_rules_v2.py',443),
  ('reg_items -> reg_field COMMA reg_items','reg_items',3,'p_reg_items','parser_rules_v2.py',450),
  ('reg_items -> reg_field','reg_items',1,'p_reg_single_item','parser_rules_v2.py',454),
  ('reg_field -> factorVar COLON expression','reg_field',3,'p_reg_field','parser_rules_v2.py',458),
  ('comments -> <empty>','comments',0,'p_comments_empty','parser_rules_v2.py',465),
  ('block -> LBRACE code RBRACE','block',3,'p_block','parser_rules_v2.py',470),
  ('singleStatement -> COMMENT singleStatement','singleStatement',2,'p_single_statement_comment','parser_rules_v2.py',476),
  ('singleStatement -> statement','singleStatement',1,'p_single_statement','parser_rules_v2.py',481),
  ('if -> IF LPAREN expression RPAREN singleStatement else','if',6,'p_if','parser_rules_v2.py',487),
  ('else -> ELSE singleStatement','else',2,'p_else','parser_rules_v2.py',495),
  ('else -> <empty>','else',0,'p_else_empty','parser_rules_v2.py',499),
  ('expressionTernaryCond -> expressionBoolOp QUESTION expression COLON expression','expressionTernaryCond',5,'p_ternaryConditiopnal','parser_rules_v2.py',504),
  ('expressionTernaryCond -> expressionBoolOp','expressionTernaryCond',1,'p_ternaryConditiopnal_BoolOp','parser_rules_v2.py',513),
  ('while -> WHILE LPAREN expression RPAREN singleStatement','while',5,'p_while','parser_rules_v2.py',518),
  ('for -> FOR LPAREN optional_expr SEMICOLON expression SEMICOLON optional_expr RPAREN singleStatement','for',9,'p_for','parser_rules_v2.py',525),
  ('do_while -> DO singleStatement WHILE LPAREN expression RPAREN SEMICOLON','do_while',7,'p_do_while','parser_rules_v2.py',534),
  ('expressionFunction -> MULTIPLICACIONESCALAR LPAREN expression COMMA expression RPAREN','expressionFunction',6,'p_scalarMultiplication_1','parser_rules_v2.py',543),
  ('expressionFunction -> MULTIPLICACIONESCALAR LPAREN expression COMMA expression COMMA expression RPAREN','expressionFunction',8,'p_scalarMultiplication_2','parser_rules_v2.py',556),
  ('expressionFunction -> CAPITALIZAR LPAREN expression RPAREN','expressionFunction',4,'p_capitalize','parser_rules_v2.py',571),
  ('expressionFunction -> COLINEALES LPAREN expression COMMA expression RPAREN','expressionFunction',6,'p_collinear','parser_rules_v2.py',579),
  ('expressionFunction -> PRINT LPAREN expression RPAREN','expressionFunction',4,'p_print','parser_rules_v2.py',593),
  ('expressionFunction -> LENGTH LPAREN expression RPAREN','expressionFunction',4,'p_length','parser_rules_v2.py',598),
]
