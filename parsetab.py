
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E3F4FE91CB56E080E35EA66649ABE603'
    
_lr_action_items = {'NUMBER':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[24,24,24,-8,24,24,-9,-7,24,24,-6,-5,24,24,24,24,24,24,24,-48,24,24,24,24,24,24,24,24,24,24,24,-4,24,24,-47,24,-46,24,24,24,24,24,24,24,-54,-51,24,24,24,-49,-56,-50,24,-55,]),'WHILE':([0,6,12,25,29,30,32,33,37,40,48,49,50,68,79,94,97,106,109,114,120,121,123,126,128,129,],[2,2,-8,-9,-7,2,-6,-5,2,2,78,-48,2,-4,-47,-46,2,2,-54,-51,2,-49,-56,-50,2,-55,]),'IF':([0,6,12,25,29,30,32,33,37,40,49,50,68,79,94,97,106,109,114,120,121,123,126,128,129,],[26,26,-8,-9,-7,26,-6,-5,26,26,-48,26,-4,-47,-46,26,26,-54,-51,26,-49,-56,-50,26,-55,]),'CAPITALIZAR':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[5,5,5,-8,5,5,-9,-7,5,5,-6,-5,5,5,5,5,5,5,5,-48,5,5,5,5,5,5,5,5,5,5,5,-4,5,5,-47,5,-46,5,5,5,5,5,5,5,-54,-51,5,5,5,-49,-56,-50,5,-55,]),'PRINT':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[27,27,27,-8,27,27,-9,-7,27,27,-6,-5,27,27,27,27,27,27,27,-48,27,27,27,27,27,27,27,27,27,27,27,-4,27,27,-47,27,-46,27,27,27,27,27,27,27,-54,-51,27,27,27,-49,-56,-50,27,-55,]),'SEMICOLON':([1,3,8,10,13,16,17,18,19,20,21,23,24,28,34,35,36,38,42,43,54,55,63,67,72,76,80,83,84,85,86,87,89,90,96,99,101,104,107,110,113,116,117,122,127,],[-24,-53,-40,-21,-27,-44,-22,-30,-10,-34,-20,-17,-26,-19,-14,-28,68,-25,-39,-33,-16,-12,-18,-15,-31,-29,-23,103,-11,-43,-42,-41,-32,-35,-13,-59,-62,-38,-61,-52,119,123,-57,-60,-58,]),'DO':([0,6,12,25,29,30,32,33,37,40,49,50,68,79,94,97,106,109,114,120,121,123,126,128,129,],[6,6,-8,-9,-7,6,-6,-5,6,6,-48,6,-4,-47,-46,6,6,-54,-51,6,-49,-56,-50,6,-55,]),'MEQUAL':([1,3,8,10,13,16,17,18,19,20,21,23,24,28,34,35,38,42,43,54,63,67,72,76,80,85,86,87,89,90,96,99,101,104,107,110,117,122,127,],[-24,-53,-40,-21,-27,58,-22,-30,-10,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,-18,-15,-31,-29,-23,-43,-42,-41,-32,-35,-13,-59,-62,-38,-61,-52,-57,-60,-58,]),'LPAREN':([0,2,5,6,7,9,11,12,14,15,22,25,26,27,29,30,31,32,33,37,39,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,78,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[7,44,47,7,7,52,53,-8,7,55,7,-9,64,65,-7,7,7,-6,-5,7,70,7,7,7,7,7,7,-48,7,7,7,7,7,7,7,7,7,7,7,-4,7,7,100,-47,7,-46,7,7,7,7,7,7,7,-54,-51,7,7,7,-49,-56,-50,7,-55,]),'$end':([0,4,12,25,29,32,33,37,40,49,68,69,71,79,94,109,114,121,123,126,129,],[-3,0,-8,-9,-7,-6,-5,-3,-3,-48,-4,-1,-2,-47,-46,-54,-51,-49,-56,-50,-55,]),'COLON':([1,3,8,10,13,16,17,18,19,20,21,23,24,28,34,35,38,42,43,54,63,67,72,75,76,80,85,86,87,89,90,96,99,101,104,107,110,117,122,127,],[-24,-53,-40,-21,-27,-44,-22,-30,-10,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,-18,-15,-31,98,-29,-23,-43,-42,-41,-32,-35,-13,-59,-62,-38,-61,-52,-57,-60,-58,]),'RPAREN':([1,3,8,10,13,16,17,18,19,20,21,23,24,28,34,35,38,42,43,51,54,63,67,72,74,76,77,80,81,84,85,86,87,89,90,92,93,96,99,101,104,107,110,111,112,115,117,119,122,124,125,127,],[-24,-53,-40,-21,-27,-44,-22,-30,-10,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,80,-16,-18,-15,-31,97,-29,99,-23,101,-11,-43,-42,-41,-32,-35,106,107,-13,-59,-62,-38,-61,-52,116,117,122,-57,-12,-60,127,128,-58,]),'COMP':([1,8,10,13,17,18,20,21,23,24,28,34,35,38,42,43,54,63,67,72,76,80,89,90,96,99,101,104,107,117,122,127,],[-24,-40,-21,-27,-22,60,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,-18,-15,-31,60,-23,-32,-35,-13,-59,-62,-38,-61,-57,-60,-58,]),'ELSE':([12,25,29,32,33,49,68,79,94,109,114,121,123,126,129,],[-8,-9,-7,-6,-5,-48,-4,-47,-46,-54,120,-49,-56,-50,-55,]),'LENGTH':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[9,9,9,-8,9,9,-9,-7,9,9,-6,-5,9,9,9,9,9,9,9,-48,9,9,9,9,9,9,9,9,9,9,9,-4,9,9,-47,9,-46,9,9,9,9,9,9,9,-54,-51,9,9,9,-49,-56,-50,9,-55,]),'PEQUAL':([1,3,8,10,13,16,17,18,19,20,21,23,24,28,34,35,38,42,43,54,63,67,72,76,80,85,86,87,89,90,96,99,101,104,107,110,117,122,127,],[-24,-53,-40,-21,-27,57,-22,-30,-10,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,-18,-15,-31,-29,-23,-43,-42,-41,-32,-35,-13,-59,-62,-38,-61,-52,-57,-60,-58,]),'RBRACKET':([1,3,8,10,13,16,17,18,19,20,21,23,24,28,34,35,38,42,43,54,61,62,63,67,72,76,80,85,86,87,88,89,90,96,99,101,104,105,107,110,117,122,127,],[-24,-53,-40,-21,-27,-44,-22,-30,-10,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,90,-37,-18,-15,-31,-29,-23,-43,-42,-41,104,-32,-35,-13,-59,-62,-38,-36,-61,-52,-57,-60,-58,]),'NOT':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[41,41,41,-8,41,41,-9,-7,41,41,-6,-5,41,41,41,41,41,41,41,-48,41,41,41,41,41,41,41,41,41,41,41,-4,41,41,-47,41,-46,41,41,41,41,41,41,41,-54,-51,41,41,41,-49,-56,-50,41,-55,]),'DOUBLE_AO':([0,1,6,7,8,10,12,13,14,17,21,22,23,24,25,28,29,30,31,32,33,35,37,38,40,41,42,44,45,46,47,49,50,52,53,55,56,57,58,59,60,63,64,65,68,70,73,79,80,90,91,94,97,98,99,100,101,102,103,104,106,107,108,109,114,117,118,119,120,121,122,123,126,127,128,129,],[14,-24,14,14,-40,-21,-8,-27,14,-22,-20,14,63,-26,-9,-19,-7,14,14,-6,-5,-28,14,-25,14,14,-39,14,14,14,14,-48,14,14,14,14,14,14,14,14,14,-18,14,14,-4,14,14,-47,-23,-35,14,-46,14,14,-59,14,-62,14,14,-38,14,-61,14,-54,-51,-57,14,14,14,-49,-60,-56,-50,-58,14,-55,]),'LBRACE':([0,6,12,25,29,30,32,33,37,40,49,50,68,79,94,97,106,109,114,120,121,123,126,128,129,],[30,30,-8,-9,-7,30,-6,-5,30,30,-48,30,-4,-47,-46,30,30,-54,-51,30,-49,-56,-50,30,-55,]),'FOR':([0,6,12,25,29,30,32,33,37,40,49,50,68,79,94,97,106,109,114,120,121,123,126,128,129,],[15,15,-8,-9,-7,15,-6,-5,15,15,-48,15,-4,-47,-46,15,15,-54,-51,15,-49,-56,-50,15,-55,]),'FALSE':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[35,35,35,-8,35,35,-9,-7,35,35,-6,-5,35,35,35,35,35,35,35,-48,35,35,35,35,35,35,35,35,35,35,35,-4,35,35,-47,35,-46,35,35,35,35,35,35,35,-54,-51,35,35,35,-49,-56,-50,35,-55,]),'VAR':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[38,38,38,-8,38,38,-9,-7,38,38,-6,-5,38,38,38,38,38,38,38,-48,38,38,38,38,38,38,38,38,38,38,38,-4,38,38,-47,38,-46,38,38,38,38,38,38,38,-54,-51,38,38,38,-49,-56,-50,38,-55,]),'BOOL_OP':([1,3,8,10,13,17,18,20,21,23,24,28,34,35,38,42,43,54,63,67,72,76,80,89,90,96,99,101,104,107,117,122,127,],[-24,46,-40,-21,-27,-22,-30,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,-18,-15,-31,-29,-23,-32,-35,-13,-59,-62,-38,-61,-57,-60,-58,]),'MULTIPLICACIONESCALAR':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[11,11,11,-8,11,11,-9,-7,11,11,-6,-5,11,11,11,11,11,11,11,-48,11,11,11,11,11,11,11,11,11,11,11,-4,11,11,-47,11,-46,11,11,11,11,11,11,11,-54,-51,11,11,11,-49,-56,-50,11,-55,]),'COMMA':([1,3,8,10,13,16,17,18,19,20,21,23,24,28,34,35,38,42,43,54,62,63,67,72,76,80,82,85,86,87,89,90,95,96,99,101,104,107,110,112,117,122,127,],[-24,-53,-40,-21,-27,-44,-22,-30,-10,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,91,-18,-15,-31,-29,-23,102,-43,-42,-41,-32,-35,108,-13,-59,-62,-38,-61,-52,118,-57,-60,-58,]),'LBRACKET':([0,6,7,8,12,14,17,22,25,29,30,31,32,33,37,38,40,41,42,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,90,91,94,97,98,100,102,103,104,106,108,109,114,118,119,120,121,123,126,128,129,],[22,22,22,-40,-8,22,59,22,-9,-7,22,22,-6,-5,22,-25,22,22,-39,22,22,22,22,-48,22,22,22,22,22,22,22,22,22,22,22,-4,22,22,-47,-35,22,-46,22,22,22,22,22,-38,22,22,-54,-51,22,22,22,-49,-56,-50,22,-55,]),'COLINEALES':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[39,39,39,-8,39,39,-9,-7,39,39,-6,-5,39,39,39,39,39,39,39,-48,39,39,39,39,39,39,39,39,39,39,39,-4,39,39,-47,39,-46,39,39,39,39,39,39,39,-54,-51,39,39,39,-49,-56,-50,39,-55,]),'COMMENT':([0,6,12,25,29,30,32,33,37,40,49,50,68,79,94,97,106,109,114,120,121,123,126,128,129,],[40,50,-8,-9,-7,40,-6,-5,40,40,-48,50,-4,-47,-46,50,50,-54,-51,50,-49,-56,-50,50,-55,]),'STRING':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[20,20,20,-8,20,20,-9,-7,20,20,-6,-5,20,20,20,20,20,20,20,-48,20,20,20,20,20,20,20,20,20,20,20,-4,20,20,-47,20,-46,20,20,20,20,20,20,20,-54,-51,20,20,20,-49,-56,-50,20,-55,]),'EQUAL':([1,3,8,10,13,16,17,18,19,20,21,23,24,28,34,35,38,42,43,54,63,67,72,76,80,85,86,87,89,90,96,99,101,104,107,110,117,122,127,],[-24,-53,-40,-21,-27,56,-22,-30,-10,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,-18,-15,-31,-29,-23,-43,-42,-41,-32,-35,-13,-59,-62,-38,-61,-52,-57,-60,-58,]),'AO':([0,1,6,7,8,10,12,13,14,17,20,21,22,23,24,25,28,29,30,31,32,33,34,35,37,38,40,41,42,43,44,45,46,47,49,50,52,53,54,55,56,57,58,59,60,63,64,65,67,68,70,72,73,79,80,89,90,91,94,96,97,98,99,100,101,102,103,104,106,107,108,109,114,117,118,119,120,121,122,123,126,127,128,129,],[31,-24,31,31,-40,-21,-8,-27,31,-22,-34,-20,31,-17,-26,-9,-19,-7,31,31,-6,-5,-14,-28,31,-25,31,31,-39,73,31,31,31,31,-48,31,31,31,-16,31,31,31,31,31,31,-18,31,31,-15,-4,31,-31,31,-47,-23,73,-35,31,-46,-13,31,31,-59,31,-62,31,31,-38,31,-61,31,-54,-51,-57,31,31,31,-49,-60,-56,-50,-58,31,-55,]),'QUESTION':([1,3,8,10,13,17,18,20,21,23,24,28,34,35,38,42,43,54,63,67,72,76,80,89,90,96,99,101,104,107,117,122,127,],[-24,45,-40,-21,-27,-22,-30,-34,-20,-17,-26,-19,-14,-28,-25,-39,-33,-16,-18,-15,-31,-29,-23,-32,-35,-13,-59,-62,-38,-61,-57,-60,-58,]),'TRUE':([0,6,7,12,14,22,25,29,30,31,32,33,37,40,41,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,68,70,73,79,91,94,97,98,100,102,103,106,108,109,114,118,119,120,121,123,126,128,129,],[13,13,13,-8,13,13,-9,-7,13,13,-6,-5,13,13,13,13,13,13,13,-48,13,13,13,13,13,13,13,13,13,13,13,-4,13,13,-47,13,-46,13,13,13,13,13,13,13,-54,-51,13,13,13,-49,-56,-50,13,-55,]),'RBRACE':([12,25,29,30,32,33,37,40,49,66,68,69,71,79,94,109,114,121,123,126,129,],[-8,-9,-7,-3,-6,-5,-3,-3,-48,94,-4,-1,-2,-47,-46,-54,-51,-49,-56,-50,-55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressionFunction':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'expressionBoolOp':([0,6,7,22,30,37,40,44,45,47,50,52,53,55,56,57,58,59,64,65,70,91,97,98,100,102,103,106,108,118,119,120,128,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'do_while':([0,6,30,37,40,50,97,106,120,128,],[25,25,25,25,25,25,25,25,25,25,]),'code':([0,30,37,40,],[4,66,69,71,]),'expressionVector':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'factorExp':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'vector_items':([22,91,],[61,105,]),'expression':([0,6,7,22,30,37,40,44,45,47,50,52,53,55,59,64,65,70,91,97,98,100,102,103,106,108,118,119,120,128,],[36,36,51,62,36,36,36,74,75,77,36,81,82,84,88,92,93,95,62,36,110,111,112,113,36,115,124,84,36,36,]),'while':([0,6,30,37,40,50,97,106,120,128,],[29,29,29,29,29,29,29,29,29,29,]),'optional_expr':([55,119,],[83,125,]),'statement':([0,6,30,37,40,50,97,106,120,128,],[37,49,37,37,37,49,49,49,49,49,]),'bool_atom':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'for':([0,6,30,37,40,50,97,106,120,128,],[12,12,12,12,12,12,12,12,12,12,]),'block':([0,6,30,37,40,50,97,106,120,128,],[33,33,33,33,33,33,33,33,33,33,]),'unaryExp':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[34,34,34,54,34,34,67,34,34,72,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,96,34,34,34,34,34,34,34,34,34,34,34,34,]),'singleStatement':([6,50,97,106,120,128,],[48,79,109,114,126,129,]),'expressionTernaryCond':([0,6,7,22,30,37,40,44,45,47,50,52,53,55,56,57,58,59,64,65,70,91,97,98,100,102,103,106,108,118,119,120,128,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'factorVar':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'expressionVectorAt':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'expressionComp':([0,6,7,22,30,37,40,44,45,46,47,50,52,53,55,56,57,58,59,64,65,70,91,97,98,100,102,103,106,108,118,119,120,128,],[18,18,18,18,18,18,18,18,18,76,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'expressionAssign':([0,6,7,22,30,37,40,44,45,47,50,52,53,55,56,57,58,59,64,65,70,91,97,98,100,102,103,106,108,118,119,120,128,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,85,86,87,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'if':([0,6,30,37,40,50,97,106,120,128,],[32,32,32,32,32,32,32,32,32,32,]),'factorNumExp':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'else':([114,],[121,]),'aritExp':([0,6,7,22,30,37,40,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,91,97,98,100,102,103,106,108,118,119,120,128,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,89,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'unaryExp2':([0,6,7,14,22,30,31,37,40,41,44,45,46,47,50,52,53,55,56,57,58,59,60,64,65,70,73,91,97,98,100,102,103,106,108,118,119,120,128,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> statement code','code',2,'p_code_statement','parser_rules_v2.py',27),
  ('code -> COMMENT code','code',2,'p_code_comment','parser_rules_v2.py',33),
  ('code -> <empty>','code',0,'p_code_empty','parser_rules_v2.py',39),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_1','parser_rules_v2.py',43),
  ('statement -> block','statement',1,'p_statement_block','parser_rules_v2.py',48),
  ('statement -> if','statement',1,'p_statement_if','parser_rules_v2.py',53),
  ('statement -> while','statement',1,'p_statement_while','parser_rules_v2.py',57),
  ('statement -> for','statement',1,'p_statement_for','parser_rules_v2.py',61),
  ('statement -> do_while','statement',1,'p_statement_do_while','parser_rules_v2.py',65),
  ('expression -> expressionAssign','expression',1,'p_expression_aritmethic','parser_rules_v2.py',70),
  ('optional_expr -> expression','optional_expr',1,'p_optional_expr','parser_rules_v2.py',86),
  ('optional_expr -> <empty>','optional_expr',0,'p_optional_expr_empty','parser_rules_v2.py',90),
  ('aritExp -> aritExp AO unaryExp','aritExp',3,'p_aritExp','parser_rules_v2.py',95),
  ('aritExp -> unaryExp','aritExp',1,'p_aritExp_unary','parser_rules_v2.py',114),
  ('unaryExp -> AO unaryExp','unaryExp',2,'p_unaryExp','parser_rules_v2.py',118),
  ('unaryExp -> DOUBLE_AO unaryExp','unaryExp',2,'p_unaryExp_double','parser_rules_v2.py',131),
  ('unaryExp -> unaryExp2','unaryExp',1,'p_unaryExp_double_unaryExp2','parser_rules_v2.py',141),
  ('unaryExp2 -> unaryExp2 DOUBLE_AO','unaryExp2',2,'p_unaryExp_double2','parser_rules_v2.py',145),
  ('unaryExp2 -> factorExp','unaryExp2',1,'p_unaryExp2_factor','parser_rules_v2.py',156),
  ('factorExp -> factorNumExp','factorExp',1,'p_factorExp_Num','parser_rules_v2.py',164),
  ('factorExp -> bool_atom','factorExp',1,'p_factorExp_Bool','parser_rules_v2.py',168),
  ('factorExp -> expressionVectorAt','factorExp',1,'p_factorExp_VectorAt','parser_rules_v2.py',176),
  ('factorExp -> LPAREN expression RPAREN','factorExp',3,'p_factorExp_paren','parser_rules_v2.py',180),
  ('factorExp -> expressionFunction','factorExp',1,'p_factorExp_function','parser_rules_v2.py',186),
  ('factorVar -> VAR','factorVar',1,'p_factorVarExp','parser_rules_v2.py',190),
  ('factorNumExp -> NUMBER','factorNumExp',1,'p_factorNumExp','parser_rules_v2.py',194),
  ('bool_atom -> TRUE','bool_atom',1,'p_bool_true','parser_rules_v2.py',200),
  ('bool_atom -> FALSE','bool_atom',1,'p_bool_false','parser_rules_v2.py',204),
  ('expressionBoolOp -> expressionBoolOp BOOL_OP expressionComp','expressionBoolOp',3,'p_bool_op','parser_rules_v2.py',212),
  ('expressionBoolOp -> expressionComp','expressionBoolOp',1,'p_bool_op_comp','parser_rules_v2.py',221),
  ('unaryExp -> NOT unaryExp','unaryExp',2,'p_bool_neg','parser_rules_v2.py',225),
  ('expressionComp -> expressionComp COMP aritExp','expressionComp',3,'p_bool_comp','parser_rules_v2.py',237),
  ('expressionComp -> aritExp','expressionComp',1,'p_bool_comp_arit','parser_rules_v2.py',249),
  ('unaryExp -> STRING','unaryExp',1,'p_string','parser_rules_v2.py',254),
  ('expressionVector -> LBRACKET vector_items RBRACKET','expressionVector',3,'p_vector','parser_rules_v2.py',270),
  ('vector_items -> expression COMMA vector_items','vector_items',3,'p_vector_items','parser_rules_v2.py',275),
  ('vector_items -> expression','vector_items',1,'p_vector_single_item','parser_rules_v2.py',285),
  ('expressionVectorAt -> expressionVectorAt LBRACKET expression RBRACKET','expressionVectorAt',4,'p_vector_at','parser_rules_v2.py',291),
  ('expressionVectorAt -> expressionVector','expressionVectorAt',1,'p_vector_at_vector','parser_rules_v2.py',304),
  ('expressionVectorAt -> factorVar','expressionVectorAt',1,'p_vector_at_var','parser_rules_v2.py',308),
  ('expressionAssign -> expressionTernaryCond MEQUAL expressionAssign','expressionAssign',3,'p_minusEqual','parser_rules_v2.py',327),
  ('expressionAssign -> expressionTernaryCond PEQUAL expressionAssign','expressionAssign',3,'p_plusEqual','parser_rules_v2.py',354),
  ('expressionAssign -> expressionTernaryCond EQUAL expressionAssign','expressionAssign',3,'p_equals','parser_rules_v2.py',396),
  ('expressionAssign -> expressionTernaryCond','expressionAssign',1,'p_assign_TernaryCond','parser_rules_v2.py',480),
  ('comments -> <empty>','comments',0,'p_comments_empty','parser_rules_v2.py',507),
  ('block -> LBRACE code RBRACE','block',3,'p_block','parser_rules_v2.py',512),
  ('singleStatement -> COMMENT singleStatement','singleStatement',2,'p_single_statement_comment','parser_rules_v2.py',522),
  ('singleStatement -> statement','singleStatement',1,'p_single_statement','parser_rules_v2.py',527),
  ('if -> IF LPAREN expression RPAREN singleStatement else','if',6,'p_if','parser_rules_v2.py',533),
  ('else -> ELSE singleStatement','else',2,'p_else','parser_rules_v2.py',541),
  ('else -> <empty>','else',0,'p_else_empty','parser_rules_v2.py',545),
  ('expressionTernaryCond -> expressionBoolOp QUESTION expression COLON expression','expressionTernaryCond',5,'p_ternaryConditiopnal','parser_rules_v2.py',550),
  ('expressionTernaryCond -> expressionBoolOp','expressionTernaryCond',1,'p_ternaryConditiopnal_BoolOp','parser_rules_v2.py',559),
  ('while -> WHILE LPAREN expression RPAREN singleStatement','while',5,'p_while','parser_rules_v2.py',564),
  ('for -> FOR LPAREN optional_expr SEMICOLON expression SEMICOLON optional_expr RPAREN singleStatement','for',9,'p_for','parser_rules_v2.py',571),
  ('do_while -> DO singleStatement WHILE LPAREN expression RPAREN SEMICOLON','do_while',7,'p_do_while','parser_rules_v2.py',580),
  ('expressionFunction -> MULTIPLICACIONESCALAR LPAREN expression COMMA expression RPAREN','expressionFunction',6,'p_scalarMultiplication_1','parser_rules_v2.py',589),
  ('expressionFunction -> MULTIPLICACIONESCALAR LPAREN expression COMMA expression COMMA expression RPAREN','expressionFunction',8,'p_scalarMultiplication_2','parser_rules_v2.py',602),
  ('expressionFunction -> CAPITALIZAR LPAREN expression RPAREN','expressionFunction',4,'p_capitalize','parser_rules_v2.py',617),
  ('expressionFunction -> COLINEALES LPAREN expression COMMA expression RPAREN','expressionFunction',6,'p_collinear','parser_rules_v2.py',625),
  ('expressionFunction -> PRINT LPAREN expression RPAREN','expressionFunction',4,'p_print','parser_rules_v2.py',639),
  ('expressionFunction -> LENGTH LPAREN expression RPAREN','expressionFunction',4,'p_length','parser_rules_v2.py',644),
]
