Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    SEMICOLON
    COMMA
    COMMENT
    DOT

Grammar

Rule 0     S' -> expression
Rule 1     expression -> aritExp
Rule 2     aritExp -> aritExp AO unaryExp
Rule 3     aritExp -> unaryExp
Rule 4     unaryExp -> AO unaryExp
Rule 5     unaryExp -> DOUBLE_AO unaryExp
Rule 6     unaryExp -> unaryExp2
Rule 7     unaryExp2 -> unaryExp2 DOUBLE_AO
Rule 8     unaryExp2 -> factorExp
Rule 9     factorExp -> NUMBER
Rule 10    factorExp -> LPAREN expression RPAREN

Terminals, with rules where they appear

AO                   : 2 4
COMMA                : 
COMMENT              : 
DOT                  : 
DOUBLE_AO            : 5 7
LPAREN               : 10
NUMBER               : 9
RPAREN               : 10
SEMICOLON            : 
error                : 

Nonterminals, with rules where they appear

aritExp              : 1 2
expression           : 10 0
factorExp            : 8
unaryExp             : 2 3 4 5
unaryExp2            : 6 7

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . aritExp
    (2) aritExp -> . aritExp AO unaryExp
    (3) aritExp -> . unaryExp
    (4) unaryExp -> . AO unaryExp
    (5) unaryExp -> . DOUBLE_AO unaryExp
    (6) unaryExp -> . unaryExp2
    (7) unaryExp2 -> . unaryExp2 DOUBLE_AO
    (8) unaryExp2 -> . factorExp
    (9) factorExp -> . NUMBER
    (10) factorExp -> . LPAREN expression RPAREN

    AO              shift and go to state 2
    DOUBLE_AO       shift and go to state 7
    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 9

    expression                     shift and go to state 1
    unaryExp                       shift and go to state 5
    unaryExp2                      shift and go to state 6
    factorExp                      shift and go to state 3
    aritExp                        shift and go to state 8

state 1

    (0) S' -> expression .



state 2

    (4) unaryExp -> AO . unaryExp
    (4) unaryExp -> . AO unaryExp
    (5) unaryExp -> . DOUBLE_AO unaryExp
    (6) unaryExp -> . unaryExp2
    (7) unaryExp2 -> . unaryExp2 DOUBLE_AO
    (8) unaryExp2 -> . factorExp
    (9) factorExp -> . NUMBER
    (10) factorExp -> . LPAREN expression RPAREN

    AO              shift and go to state 2
    DOUBLE_AO       shift and go to state 7
    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 9

    unaryExp                       shift and go to state 10
    unaryExp2                      shift and go to state 6
    factorExp                      shift and go to state 3

state 3

    (8) unaryExp2 -> factorExp .

    DOUBLE_AO       reduce using rule 8 (unaryExp2 -> factorExp .)
    AO              reduce using rule 8 (unaryExp2 -> factorExp .)
    $end            reduce using rule 8 (unaryExp2 -> factorExp .)
    RPAREN          reduce using rule 8 (unaryExp2 -> factorExp .)


state 4

    (9) factorExp -> NUMBER .

    DOUBLE_AO       reduce using rule 9 (factorExp -> NUMBER .)
    AO              reduce using rule 9 (factorExp -> NUMBER .)
    $end            reduce using rule 9 (factorExp -> NUMBER .)
    RPAREN          reduce using rule 9 (factorExp -> NUMBER .)


state 5

    (3) aritExp -> unaryExp .

    AO              reduce using rule 3 (aritExp -> unaryExp .)
    RPAREN          reduce using rule 3 (aritExp -> unaryExp .)
    $end            reduce using rule 3 (aritExp -> unaryExp .)


state 6

    (6) unaryExp -> unaryExp2 .
    (7) unaryExp2 -> unaryExp2 . DOUBLE_AO

    AO              reduce using rule 6 (unaryExp -> unaryExp2 .)
    $end            reduce using rule 6 (unaryExp -> unaryExp2 .)
    RPAREN          reduce using rule 6 (unaryExp -> unaryExp2 .)
    DOUBLE_AO       shift and go to state 11


state 7

    (5) unaryExp -> DOUBLE_AO . unaryExp
    (4) unaryExp -> . AO unaryExp
    (5) unaryExp -> . DOUBLE_AO unaryExp
    (6) unaryExp -> . unaryExp2
    (7) unaryExp2 -> . unaryExp2 DOUBLE_AO
    (8) unaryExp2 -> . factorExp
    (9) factorExp -> . NUMBER
    (10) factorExp -> . LPAREN expression RPAREN

    AO              shift and go to state 2
    DOUBLE_AO       shift and go to state 7
    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 9

    unaryExp                       shift and go to state 12
    unaryExp2                      shift and go to state 6
    factorExp                      shift and go to state 3

state 8

    (1) expression -> aritExp .
    (2) aritExp -> aritExp . AO unaryExp

    RPAREN          reduce using rule 1 (expression -> aritExp .)
    $end            reduce using rule 1 (expression -> aritExp .)
    AO              shift and go to state 13


state 9

    (10) factorExp -> LPAREN . expression RPAREN
    (1) expression -> . aritExp
    (2) aritExp -> . aritExp AO unaryExp
    (3) aritExp -> . unaryExp
    (4) unaryExp -> . AO unaryExp
    (5) unaryExp -> . DOUBLE_AO unaryExp
    (6) unaryExp -> . unaryExp2
    (7) unaryExp2 -> . unaryExp2 DOUBLE_AO
    (8) unaryExp2 -> . factorExp
    (9) factorExp -> . NUMBER
    (10) factorExp -> . LPAREN expression RPAREN

    AO              shift and go to state 2
    DOUBLE_AO       shift and go to state 7
    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 9

    expression                     shift and go to state 14
    unaryExp                       shift and go to state 5
    unaryExp2                      shift and go to state 6
    factorExp                      shift and go to state 3
    aritExp                        shift and go to state 8

state 10

    (4) unaryExp -> AO unaryExp .

    AO              reduce using rule 4 (unaryExp -> AO unaryExp .)
    $end            reduce using rule 4 (unaryExp -> AO unaryExp .)
    RPAREN          reduce using rule 4 (unaryExp -> AO unaryExp .)


state 11

    (7) unaryExp2 -> unaryExp2 DOUBLE_AO .

    DOUBLE_AO       reduce using rule 7 (unaryExp2 -> unaryExp2 DOUBLE_AO .)
    AO              reduce using rule 7 (unaryExp2 -> unaryExp2 DOUBLE_AO .)
    $end            reduce using rule 7 (unaryExp2 -> unaryExp2 DOUBLE_AO .)
    RPAREN          reduce using rule 7 (unaryExp2 -> unaryExp2 DOUBLE_AO .)


state 12

    (5) unaryExp -> DOUBLE_AO unaryExp .

    AO              reduce using rule 5 (unaryExp -> DOUBLE_AO unaryExp .)
    $end            reduce using rule 5 (unaryExp -> DOUBLE_AO unaryExp .)
    RPAREN          reduce using rule 5 (unaryExp -> DOUBLE_AO unaryExp .)


state 13

    (2) aritExp -> aritExp AO . unaryExp
    (4) unaryExp -> . AO unaryExp
    (5) unaryExp -> . DOUBLE_AO unaryExp
    (6) unaryExp -> . unaryExp2
    (7) unaryExp2 -> . unaryExp2 DOUBLE_AO
    (8) unaryExp2 -> . factorExp
    (9) factorExp -> . NUMBER
    (10) factorExp -> . LPAREN expression RPAREN

    AO              shift and go to state 2
    DOUBLE_AO       shift and go to state 7
    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 9

    unaryExp                       shift and go to state 15
    unaryExp2                      shift and go to state 6
    factorExp                      shift and go to state 3

state 14

    (10) factorExp -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 16


state 15

    (2) aritExp -> aritExp AO unaryExp .

    AO              reduce using rule 2 (aritExp -> aritExp AO unaryExp .)
    RPAREN          reduce using rule 2 (aritExp -> aritExp AO unaryExp .)
    $end            reduce using rule 2 (aritExp -> aritExp AO unaryExp .)


state 16

    (10) factorExp -> LPAREN expression RPAREN .

    DOUBLE_AO       reduce using rule 10 (factorExp -> LPAREN expression RPAREN .)
    AO              reduce using rule 10 (factorExp -> LPAREN expression RPAREN .)
    $end            reduce using rule 10 (factorExp -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 10 (factorExp -> LPAREN expression RPAREN .)

